pipeline {
    agent any // Ensure this agent has Docker, kubectl, Ansible, and k8s collection installed

    triggers {
        githubPush()
    }

    environment {
        // IMPORTANT: Use the Docker Hub user specified in your K8s manifests
        DOCKER_HUB_USER = 'khushi2912'
        // REPO_NAME seems unused now, but keeping if needed elsewhere
        // REPO_NAME = 'healsphere_project'
        IMAGE_TAG = 'latest'
        // Define the Kubernetes namespace used in your manifests
        K8S_NAMESPACE = 'mindnotes'
        // Define the path to your K8s manifests within the repo checkout
        K8S_MANIFEST_PATH = 'MIndNotes/k8s' // Adjusted based on your 'tree' output
    }

    stages {
        stage('Checkout') {
            steps {
                // Assuming Jenkinsfile is at the root of the repo, adjust path if needed
                // If Jenkinsfile is inside MIndNotes, checkout '.'
                git branch: 'main', url: 'https://github.com/khushipatel2912/HealSphere---Mental-Health-Platform.git'
            }
        }

        stage('Build Microservices') {
            steps {
                script {
                    // Map service names (as used in k8s/dockerhub) to their build context paths
                    def servicesToBuild = [
                        'login-service': 'MIndNotes/login_service',
                        'self-discovery-service': 'MIndNotes/self_discovery_service',
                        'coping-with-crisis-service': 'MIndNotes/Coping_with_services', // Corrected path from compose file context
                        'self-help-service': 'MIndNotes/selfHelp',           // Corrected path from compose file context
                        'letter-service': 'MIndNotes/letters_Service',     // Corrected path from compose file context
                        'frontend': 'MIndNotes/mentalhealthapp'         // Corrected path from compose file context
                    ]

                    for (serviceName in servicesToBuild.keySet()) {
                        def contextPath = servicesToBuild[serviceName]
                        def fullImageName = "${DOCKER_HUB_USER}/${serviceName}:${IMAGE_TAG}"
                        // Use --tag directly during build for simplicity
                        sh "docker build -t ${fullImageName} ${contextPath}"
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    // Use the same service names as the build stage keys
                    def servicesToPush = [
                        'login-service',
                        'self-discovery-service',
                        'coping-with-crisis-service',
                        'self-help-service',
                        'letter-service',
                        'frontend'
                    ]

                    // Assuming DockerHubCred is setup in Jenkins Credentials
                    docker.withRegistry('https://index.docker.io/v1/', 'DockerHubCred') {
                        for (serviceName in servicesToPush) {
                          def fullImageName = "${DOCKER_HUB_USER}/${serviceName}:${IMAGE_TAG}"
                          sh "docker push ${fullImageName}"
                        }
                    }
                }
            }
        }

        // stage('Deploy to Kubernetes via Ansible') {
        //     steps {
        //         script {
        //             // Ensure ansible collection is installed (better to do this on agent setup)
        //             // sh 'ansible-galaxy collection install kubernetes.core'

        //             // Run the new Ansible playbook for K8s
        //             // Assumes deploy-k8s.yml and inventory-k8s are in the root of the checked-out repo
        //             // Remove ANSIBLE_HOST_KEY_CHECKING as we use local connection
        //             ansiblePlaybook(
        //                 playbook: 'MIndNotes/deploy-k8s.yml',
        //                 inventory: 'MIndNotes/inventory-k8s',
        //                 extras: "-e k8s_manifest_path=${env.K8S_MANIFEST_PATH} -e k8s_namespace=${env.K8S_NAMESPACE}" // Pass vars to Ansible
        //             )
        //         }
        //     }
        // }

        //         stage('Deploy to Kubernetes via Ansible') {
        //     steps {
        //         // Force UTF-8 locale environment variables for this block
        //         withEnv(["LANG=en_US.UTF-8", "LC_ALL=en_US.UTF-8"]) {
        //             script {
        //                 echo "--- Running Ansible with forced UTF-8 locale ---" // Add for logging
        //                 ansiblePlaybook(
        //                     playbook: 'MIndNotes/deploy-k8s.yml',
        //                     inventory: 'MIndNotes/inventory-k8s',
        //                     extras: "-e k8s_manifest_path=${env.K8S_MANIFEST_PATH} -e k8s_namespace=${env.K8S_NAMESPACE}"
        //                 )
        //             }
        //         } // End withEnv
        //     }
        // }

        stage('Deploy to Kubernetes via Ansible') {
            steps {
                // Force UTF-8 locale AND specify collections path (singular)
                withEnv([
                    "LANG=en_US.UTF-8",
                    "LC_ALL=en_US.UTF-8",
                    "ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections" // Corrected to singular
                ]) {
                    script {
                        echo "--- Running Ansible with forced UTF-8 locale and collections path ---"
                        def absoluteManifestPath = "${env.WORKSPACE}/MIndNotes/k8s"
                        echo "Manifest path being passed to Ansible: ${absoluteManifestPath}"

                        ansiblePlaybook(
                            playbook: 'MIndNotes/deploy-k8s.yml',
                            inventory: 'MIndNotes/inventory-k8s',
                            extras: "-e k8s_manifest_path=${absoluteManifestPath} -e k8s_namespace=${env.K8S_NAMESPACE}"
                        )
                    }
                } // End withEnv
            }
        }
    }

    post {
        success {
            mail to: 'khushi.patel@iiitb.ac.in', // Keep your notification email
                subject: "✅ [K8s] HealSphere Deployment SUCCESS",
                body: "The HealSphere app was deployed successfully to Kubernetes namespace ${env.K8S_NAMESPACE}!"
        }
        failure {
            mail to: 'khushi.patel@iiitb.ac.in', // Keep your notification email
                subject: "❌ [K8s] HealSphere Deployment FAILED",
                body: "The HealSphere Kubernetes deployment failed. Please check Jenkins logs (${env.BUILD_URL})."
        }
        always {
            cleanWs()
        }
    }
}
