---
- name: Deploy HealSphere App and ELK Stack to Kubernetes
  hosts: localhost
  gather_facts: false
  connection: local

  # Variables passed from Jenkins via -e
  # app_k8s_manifest_path, app_k8s_namespace
  # elk_k8s_manifest_path, elk_k8s_namespace

  tasks:
    - name: Apply HealSphere Application K8s manifests
      ansible.builtin.command:
        cmd: "kubectl apply -n {{ app_k8s_namespace }} -f {{ app_k8s_manifest_path }}"
      register: app_kubectl_apply_result
      changed_when: "'configured' in app_kubectl_apply_result.stdout or 'created' in app_kubectl_apply_result.stdout"
      failed_when: app_kubectl_apply_result.rc != 0

    - name: Show HealSphere App kubectl apply results
      ansible.builtin.debug:
        var: app_kubectl_apply_result.stdout_lines
        verbosity: 1

    - name: Apply ELK Stack K8s manifests
      ansible.builtin.command:
        cmd: "kubectl apply -n {{ elk_k8s_namespace }} -f {{ elk_k8s_manifest_path }}"
      register: elk_kubectl_apply_result
      changed_when: "'configured' in elk_kubectl_apply_result.stdout or 'created' in elk_kubectl_apply_result.stdout"
      failed_when: elk_kubectl_apply_result.rc != 0
      # Add ignore_errors if you want the pipeline to continue if ELK deployment has issues but app is fine
      # ignore_errors: yes

    - name: Show ELK Stack kubectl apply results
      ansible.builtin.debug:
        var: elk_kubectl_apply_result.stdout_lines
        verbosity: 1

    # Add waits for deployments if needed
    # - name: Wait for Login Service deployment rollout to complete
    #   kubernetes.core.k8s_info: # This would require kubernetes.core collection to be functional
    # ...
